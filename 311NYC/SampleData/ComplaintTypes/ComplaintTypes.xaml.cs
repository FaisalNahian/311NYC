//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.ComplaintTypes
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class feed { }
#else

	public class feed : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public feed()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/311NYC;component/SampleData/ComplaintTypes/ComplaintTypes.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private string _title = string.Empty;

		public string title
		{
			get
			{
				return this._title;
			}

			set
			{
				if (this._title != value)
				{
					this._title = value;
					this.OnPropertyChanged("title");
				}
			}
		}

		private string _updated = string.Empty;

		public string updated
		{
			get
			{
				return this._updated;
			}

			set
			{
				if (this._updated != value)
				{
					this._updated = value;
					this.OnPropertyChanged("updated");
				}
			}
		}

		private author _author = new author();

		public author author
		{
			get
			{
				return this._author;
			}

			set
			{
				if (this._author != value)
				{
					this._author = value;
					this.OnPropertyChanged("author");
				}
			}
		}

		private entryCollection _entryCollection = new entryCollection();

		public entryCollection entryCollection
		{
			get
			{
				return this._entryCollection;
			}
		}
	}

	public class author : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _name = string.Empty;

		public string name
		{
			get
			{
				return this._name;
			}

			set
			{
				if (this._name != value)
				{
					this._name = value;
					this.OnPropertyChanged("name");
				}
			}
		}

		private string _email = string.Empty;

		public string email
		{
			get
			{
				return this._email;
			}

			set
			{
				if (this._email != value)
				{
					this._email = value;
					this.OnPropertyChanged("email");
				}
			}
		}
	}

	public class entry : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private link _link = new link();

		public link link
		{
			get
			{
				return this._link;
			}

			set
			{
				if (this._link != value)
				{
					this._link = value;
					this.OnPropertyChanged("link");
				}
			}
		}

		private string _title = string.Empty;

		public string title
		{
			get
			{
				return this._title;
			}

			set
			{
				if (this._title != value)
				{
					this._title = value;
					this.OnPropertyChanged("title");
				}
			}
		}

		private string _summary = string.Empty;

		public string summary
		{
			get
			{
				return this._summary;
			}

			set
			{
				if (this._summary != value)
				{
					this._summary = value;
					this.OnPropertyChanged("summary");
				}
			}
		}
	}

	public class link : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _rel = string.Empty;

		public string rel
		{
			get
			{
				return this._rel;
			}

			set
			{
				if (this._rel != value)
				{
					this._rel = value;
					this.OnPropertyChanged("rel");
				}
			}
		}

		private string _href = string.Empty;

		public string href
		{
			get
			{
				return this._href;
			}

			set
			{
				if (this._href != value)
				{
					this._href = value;
					this.OnPropertyChanged("href");
				}
			}
		}
	}

	public class entryCollection : System.Collections.ObjectModel.ObservableCollection<entry>
	{ 
	}
#endif
}
